Connect4
Game.js
document.addEventListener('DOMContentLoaded',() => {
    const squares = document.querySelectorAll(".grid div")
    const result = document.querySelector("#result")
    const displayCurrentPlayer = document.querySelector("#current-Player")
    let currentplayer = 1
    const winningArrays = [
        [0, 1, 2, 3],[41, 40, 39, 38],[7, 8, 9, 10],[34, 33, 32, 31],[14, 15, 16, 17],
        [27, 26, 25, 24],[21, 22, 23, 24],[20, 19, 18, 17],[28, 29, 30, 31],[13, 12, 11, 10],
        [35, 36, 37, 38],[6, 5, 4, 3],[0, 7, 14, 21],[41, 34, 27, 20],[1, 8, 15, 22],
        [40, 33, 26, 19],[2, 9, 16, 23],[39, 32, 25, 18],[3, 10, 17, 24],[38, 31, 24, 17],
        [4, 11, 18, 25],[37, 30, 23, 16],[5, 12, 19, 26],[36, 29, 22, 15],[6, 13, 20, 27],
        [35, 28, 21, 14],[0, 8, 16, 24],[41, 33, 25, 17],[7, 15, 23, 31],[34, 26, 18, 10],
        [14, 22, 30, 38],[27, 19, 11, 3],[35, 29, 23, 17],[6, 12, 18, 24],[28, 22, 16, 10],
        [13, 19, 25, 31],[21, 15, 9, 3],[20, 26, 32, 38],[36, 30, 24, 18],[5, 11, 17, 23],
        [37, 31, 25, 19],[4, 10, 16, 22],[2, 10, 18, 26],[39, 31, 23, 15],[1, 9, 17, 25],
        [40, 32, 24, 16],[9, 17, 25, 33],[8, 16, 24, 32],[11, 17, 23, 29],[12, 18, 24, 30],
        [1, 2, 3, 4],[5, 4, 3, 2],[8, 9, 10, 11],[12, 11, 10, 9],[15, 16, 17, 18],
        [19, 18, 17, 16],[22, 23, 24, 25],[26, 25, 24, 23],[29, 30, 31, 32],[33, 32, 31, 30],
        [36, 37, 38, 39],[40, 39, 38, 37],[7, 14, 21, 28],[8, 15, 22, 29],[9, 16, 23, 30],
        [10, 17, 24, 31],[11, 18, 25, 32],[12, 19, 26, 33],[13, 20, 27, 34],
      ]

      function checkBoard() {
        for (let y = 0; y < winningArrays.length; y++) {
          const square1 = squares[winningArrays[y][0]]
          const square2 = squares[winningArrays[y][1]]
          const square3 = squares[winningArrays[y][2]]
          const square4 = squares[winningArrays[y][3]]
    
          //check those squares to see if they all have the class of player-one
          if (
            square1.classList.contains('player-one') &&
            square2.classList.contains('player-one') &&
            square3.classList.contains('player-one') &&
            square4.classList.contains('player-one')
          )
          {
            result.innerHTML = 'Player One Wins!'
          }
          //check those squares to see if they all have the class of player-two
          if (
            square1.classList.contains('player-two') &&
            square2.classList.contains('player-two') &&
            square3.classList.contains('player-two') &&
            square4.classList.contains('player-two')
          )
          {
            result.innerHTML = 'Player Two Wins!'
          }
        }
      }

    for(let i=0; i < squares.length; i++)
    {
        squares[i].onclick =() => {
            // alert('You have clicked '+ i)
            if(squares[i + 7].classList.contains('taken') && !squares[i].classList.contains('taken'))
            {
                if(currentplayer == 1)
                {
                    squares[i].classList.add('taken')
                    squares[i].classList.add('player-one')
                    currentplayer = 2
                    displayCurrentPlayer.innerHTML = currentplayer
                }
                else if(currentplayer == 2)
                {
                    squares[i].classList.add('taken')
                    squares[i].classList.add('player-two')
                    currentplayer = 1
                    displayCurrentPlayer.innerHTML = currentplayer
                }
                else{
                    alert("Can't Go Here")
                }
                checkBoard()
            }
        }
    }
})

Index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <script src="game.js"></script>
    <title>Connect Four</title>
</head>
<body>
    <h3> The Current player is : Player <span id="current-Player">1</span></h3>
    <h3 id="result"></h3>
    <div class="grid">
        
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
         
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
         
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
         
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
         
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
         
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
         
        <div class="taken"></div>
        <div class="taken"></div>
        <div class="taken"></div>
        <div class="taken"></div>
        <div class="taken"></div>
        <div class="taken"></div>
        <div class="taken"></div>
        
    </div>


</body>
</html>

Style.css
.grid{
    height: 120px;
    width: 140px;
    border: 1px solid black;
    display: flex;
    flex-wrap: wrap;
}

.grid div{
    height: 20px;
    width: 20px;
}

.player-one{
    background-color: red;
    border-radius: 50%;
}
.player-two{
    background-color: blue;
    border-radius: 50%;
}


SPACE INVATERS GAME
INDEX.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Invaders</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h3 class="result">0</h3>
    <div class="grid">
    
  </div>
    <script src="game.js"></script>
</body>
</html>


STYLE.CSS
.grid{
    width: 300px;
    height: 300px;
    border: 1px solid black;
    display: flex;
    flex-wrap: wrap;
}

.grid div{
    height: 20px;
    width: 20px;
}

.invader{
    background-color: blueviolet;
    border-radius: 50%;
}

.shooter{
    background-color: red;
}

.laser{
    background-color: orange;
}

.boom{
    background-color: yellow;
}

GAME.JS
const grid = document.querySelector(".grid")
const result = document.querySelector(".result")

let currentshooterindex = 202
const width = 15
let direction = 1;
let timerid
let movingRight = true

let aliensRemoved = []
results = 0

for(let i=1; i< 225; i++)
{
    const square = document.createElement("div")
    grid.appendChild(square)
}

const squares = Array.from(document.querySelectorAll(".grid div"))

const alieninvaders = [
    0,1,2,3,4,5,6,7,8,9,
    15,16,17,18,19,20,21,22,23,24,
    30,31,32,33,34,35,36,37,38,39
]

function draw(){
    for(let i=0; i< alieninvaders.length; i++)
    {
        if(!aliensRemoved.includes(i))
        {
        squares[alieninvaders[i]].classList.add('invader')
        }
    }
}

draw()
squares[currentshooterindex].classList.add('shooter')

function moveShooter(e){
    squares[currentshooterindex].classList.remove('shooter')
    switch(e.key){
        case 'ArrowLeft':
            if(currentshooterindex % width !== 0)
            
                currentshooterindex -= 1
                break
            
            
        
        case 'ArrowRight':
            if((currentshooterindex % width) < width -1)

            currentshooterindex += 1
            break
    }
    squares[currentshooterindex].classList.add('shooter')
}

function remove(){
    for(let i=0; i< alieninvaders.length; i++)
    {
        squares[alieninvaders[i]].classList.remove('invader')
    }
}

document.addEventListener('keydown',moveShooter)

function moveinvaders(){
    const leftedge = alieninvaders[0] % width ===0
    const rightedge = alieninvaders[alieninvaders.length-1] %width === width - 1
    remove()
if(rightedge && movingRight)
{
    for(let i = 0; i < alieninvaders.length; i++)
    {
        
        alieninvaders[i] += width -1
        direction = -1
        movingRight = false
    }

}

if(leftedge && !movingRight)
{
    for(let i = 0; i < alieninvaders.length; i++)
    {
        
        alieninvaders[i] += width
        direction = 1
        movingRight = true
    }

}

for(let i=0; i< alieninvaders.length; i++)
{
    alieninvaders[i] += direction

}
    draw()
    if(squares[currentshooterindex].classList.contains('invader','shooter'))
    {
        result.innerHTML = "Game Over !!"
        clearInterval(timerid)
    }
    if(aliensRemoved.length === alieninvaders.length)
    {
        result.innerHTML = "You Win"
        clearInterval(timerid)
    }
}

timerid = setInterval(moveinvaders, 500)

function shoot(e){
    let laserid
    let currentlasetindex = currentshooterindex

    function movelaser(){
        squares[currentlasetindex].classList.remove('laser')
        currentlasetindex -= width
        squares[currentlasetindex].classList.add('laser')
        if(squares[currentlasetindex].classList.contains('invader'))
        {
            squares[currentlasetindex].classList.remove('laser')
            squares[currentlasetindex].classList.add('boom')
            setTimeout(()=> squares[currentlasetindex].classList.remove('boom'),300)
            clearInterval(laserid)

            const alienhit = alieninvaders.indexOf(currentlasetindex)
            aliensRemoved.push(alienhit)
            results++
            result.innerHTML = results
        }

    }
    switch(e.key){
        case'ArrowUp':
        laserid = setInterval(movelaser,100)
    }
}

document.addEventListener('keyup', shoot)

