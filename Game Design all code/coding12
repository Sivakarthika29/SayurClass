MEMORY GAME
INDEX.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="style.css">
    <script src="mem.js" defer></script>
    <title>Memory Game</title>
</head>
<body>
    <h3>Memory Game</h3>
    <div id="gameBoard" class="game">
         </div>   
</body>
</html>

STYLE.CSS
body{
    margin:0;
    padding:0;
    font-family:Verdana, Geneva, Tahoma, sans-serif;
    background-color: #f5e8ba;
}

h3{
    font-size:2rem;
    text-align: center;
    color:crimson
}

.game{
    display:grid;
    margin:40px auto;
    grid-template-columns: repeat(4,120px);
    grid-row-gap:2em;
    align-items: center;
    justify-content: center;
}

#gameBoard div{
    height:150px;
    width:80px;
    border:2px solid rgb(151, 151, 202);
    display:flex;
    align-items: center;
    justify-content: center;
    font-size:2em;
    color:brown;
    background-color: #e5e5f7;
}

.cardback{
    background-color: #e5e5f7;
    opacity: 0.8;
    background-image:  linear-gradient(135deg, #444cf7 25%, transparent 25%), linear-gradient(225deg, #444cf7 25%, transparent 25%), linear-gradient(45deg, #444cf7 25%, transparent 25%), linear-gradient(315deg, #444cf7 25%, #e5e5f7 25%);
    background-position:  10px 0, 10px 0, 0 0, 0 0;
    background-size: 10px 10px;
    background-repeat: repeat;
}

#gameBoard div:hover{
    cursor:pointer;
}

.won{
    font-size:3em;
    display:flex;
    justify-content:center;
    height:500px;
    align-items: center;
    color:blue;
    width:500px;
    margin:0px auto;
}
MEM.JS
const cardsArray = [
    {
        name:'dog',
        icon:'<i class="fa-solid fa-dog"></i>'
    },
    {
        name:'hippo',
        icon:'<i class="fa-solid fa-hippo"></i>'
    },
    {
        name:'fish',
        icon:'<i class="fa-solid fa-fish"></i>'
    },
    {
        name:'cat',
        icon:'<i class="fa-solid fa-cat"></i>'
    },
    {
        name:'spider',
        icon:'<i class="fa-solid fa-spider"></i>'
    },
    {
        name:'frog',
        icon:'<i class="fa-solid fa-frog"></i>'
    },
    {
        name:'dog',
        icon:'<i class="fa-solid fa-dog"></i>'
    },
    {
        name:'hippo',
        icon:'<i class="fa-solid fa-hippo"></i>'
    },
    {
        name:'fish',
        icon:'<i class="fa-solid fa-fish"></i>'
    },
    {
        name:'cat',
        icon:'<i class="fa-solid fa-cat"></i>'
    },
    {
        name:'spider',
        icon:'<i class="fa-solid fa-spider"></i>'
    },
    {
        name:'frog',
        icon:'<i class="fa-solid fa-frog"></i>'
    }
];

let flippedCards = [];
let matchedPairs = 0;
shuffleCards();
const gameBoard = document.getElementById('gameBoard')
displayCards();

function shuffleCards(){
    for(let i=cardsArray.length-1;i>=0;i--){
        const randIndex = Math.floor(Math.random()*(i+1));
        [cardsArray[i],cardsArray[randIndex]] = [cardsArray[randIndex],cardsArray[i]]
    }
}

function displayCards(){
    cardsArray.forEach((curr,index,arr)=>{
        const card = document.createElement('div');
        card.setAttribute('id',index);
        card.classList.add('cardback');
        card.classList.add('active');
        gameBoard.append(card); 
        card.addEventListener('click',flipCard);
    })
}

function flipCard(){
    if(flippedCards.length<2 && this.classList.contains('active')){
        let cardId = this.getAttribute('id');
        flippedCards.push(this);
        this.classList.remove('cardback');
        this.innerHTML = cardsArray[cardId].icon;
        if(flippedCards.length==2){
            setTimeout(checkMatch,1000);
        }
    }
}

function checkMatch(){
    const card1Id = flippedCards[0].getAttribute('id');
    const card2Id = flippedCards[1].getAttribute('id');
    if(cardsArray[card1Id].name === cardsArray[card2Id].name){
        flippedCards[0].style.border = 'none';
        flippedCards[0].style.backgroundColor = '#f5e8ba';
        flippedCards[0].innerHTML = '';
        flippedCards[0].classList.remove('active');
        flippedCards[1].classList.remove('active');
        flippedCards[1].style.border = 'none';
        flippedCards[1].style.backgroundColor = '#f5e8ba';
        flippedCards[1].innerHTML = "";
        matchedPairs++;
        checkGameOver();
    }
    else{
        flippedCards[0].innerHTML = '';
        flippedCards[0].classList.add('cardback');
        flippedCards[1].innerHTML = '';
        flippedCards[1].classList.add('cardback');
    }
    flippedCards = [];
}

function checkGameOver(){
    if(matchedPairs == cardsArray.length/2){
        while(gameBoard.firstChild){
            gameBoard.removeChild(gameBoard.firstChild)
        }
        gameBoard.innerHTML = 'You Won';
        gameBoard.classList.remove('game');
        gameBoard.classList.add('won');
    }
}

SNAKE GAME
HTML 
<!DOCTYPE html> 
<html lang="en"> 
<head> 
 <meta charset="UTF-8"> 
 <meta http-equiv="X-UA-Compatible" content="IE=edge">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <link rel="stylesheet" href="style.css"> 
 <script src="app.js" defer></script> 
 <title>Snake Game</title> 
</head> 
<body> 
 <h2>Snake Game</h2> 
 <div id="msg">Press space to pause or continue</div> 
 <div id="container"> 
 <canvas id="gameBoard" width="500" height="500"></canvas>  <div id="score">Score: <span id="scoreVal">0</span></div>  </div> 
</body> 
</html> 

CSS 
*{ 
 margin:0;
 padding:0; 
 font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;  background-color: #f5e8ba; 
 text-align: center; 
} 
h2{ 
 color:darkgreen; 
} 
#msg{  
 margin-bottom: 1em; 
} 
#gameBoard{ 
 border:3px solid; 
} 
#score{ 
 margin-top: 1em; 
 font-size:2em; 
}

JAVA SCRIPT 
const gameBoard = document.getElementById('gameBoard'); const context = gameBoard.getContext('2d'); 
const scoreText = document.getElementById('scoreVal'); 
const WIDTH = gameBoard.width; 
const HEIGHT = gameBoard.height;  
const UNIT = 25; 
let foodX; 
let foodY; 
let xVel = 25; 
let yVel = 0; 
let score = 0; 
let active=true; 
let started = false; 
let paused = false; 
let snake = [ 
 {x:UNIT*3,y:0}, 
 {x:UNIT*2,y:0}, 
 {x:UNIT,y:0}, 
 {x:0,y:0}
]; 
window.addEventListener('keydown',keyPress); startGame(); 
function startGame(){ 
 context.fillStyle = '#212121'; 
 //fillRect(xStart,yStart,width,height) 
 context.fillRect(0,0,WIDTH,HEIGHT); 
 createFood(); 
 displayFood(); 
 drawSnake(); 
 } 
function clearBoard(){ 
 context.fillStyle = '#212121'; 
 //fillRect(xStart,yStart,width,height) 
 context.fillRect(0,0,WIDTH,HEIGHT); 
} 
function createFood(){ 
 foodX = Math.floor(Math.random()*WIDTH/UNIT)*UNIT;  foodY = Math.floor(Math.random()*HEIGHT/UNIT)*UNIT; }
function displayFood(){ 
 context.fillStyle = 'red'; 
 context.fillRect(foodX,foodY,UNIT,UNIT) 
} 
function drawSnake(){ 
 context.fillStyle = 'aqua'; 
 context.strokeStyle = '#212121'; 
 snake.forEach((snakePart) => { 
 context.fillRect(snakePart.x,snakePart.y,UNIT,UNIT)  context.strokeRect(snakePart.x,snakePart.y,UNIT,UNIT)  }) 
} 
function moveSnake(){ 
 const head = {x:snake[0].x+xVel, 
 y:snake[0].y+yVel} 
 snake.unshift(head) 
 if(snake[0].x==foodX && snake[0].y==foodY){  score += 1; 
 scoreText.textContent = score; 
 createFood();
 } 
 else 
 snake.pop(); 
} 
function nextTick(){ 
 if(active && !paused){ 
 setTimeout(() => { 
 clearBoard(); 
 displayFood(); 
 moveSnake(); 
 drawSnake(); 
 checkGameOver(); 
 nextTick(); 
 }, 200); 
 } 
 else if(!active){ 
 clearBoard(); 
 context.font = "bold 50px serif"; 
 context.fillStyle = "white"; 
 context.textAlign = "center"; 
 context.fillText("Game Over!!",WIDTH/2,HEIGHT/2)  }
} 
function keyPress(event){  active=true 
 if(!started){ 
 started = true; 
 nextTick(); 
 } 
 //pause when space is pressed  if(event.keyCode===32){  console.log('clicked')  if(paused){ 
 paused = false; 
 nextTick(); 
 } 
 else{ 
 paused = true; 
 } 
 } 
 const LEFT = 37 
 const UP = 38 
 const RIGHT = 39 
 const DOWN = 40
 switch(true){ 
 //left key pressed and not going right 
 case(event.keyCode==LEFT && xVel!=UNIT):  xVel=-UNIT; 
 yVel = 0; 
 break; 
 //right key pressed and not going left 
 case(event.keyCode==RIGHT && xVel!=-UNIT):  xVel=UNIT; 
 yVel=0; 
 break; 
 //Up key pressed and not going down  case(event.keyCode==UP && yVel!=UNIT):  xVel=0; 
 yVel=-UNIT; 
 break; 
 //down key pressed and not going up 
 case(event.keyCode==DOWN && yVel!=-UNIT):  xVel=0; 
 yVel=UNIT; 
 break;
 } 
} 
function checkGameOver(){ 
 switch(true){ 
 case(snake[0].x<0): 
 case(snake[0].x>=WIDTH): 
 case(snake[0].y<0): 
 case(snake[0].y>=HEIGHT): 
 active=false; 
 break; 
 } 
//check snake head collision with snake body 
 for(let i = 1; i < snake.length; i+=1){ 
 if(snake[i].x == snake[0].x && snake[i].y == snake[0].y){  active = false; 
 } 
 } 
}


